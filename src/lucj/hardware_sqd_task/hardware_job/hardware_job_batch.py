# (C) Copyright IBM 2025.
#
# This code is licensed under the Apache License, Version 2.0. You may
# obtain a copy of this license in the LICENSE.txt file in the root directory
# of this source tree or at http://www.apache.org/licenses/LICENSE-2.0.
#
# Any modifications or derivative works of this code must retain this
# copyright notice, and modified files need to carry a notice indicating
# that they have been altered from the originals.

import ffsim
from qiskit.circuit import QuantumCircuit, QuantumRegister
from qiskit import QuantumCircuit, QuantumRegister
from qiskit.transpiler.preset_passmanagers import generate_preset_pass_manager
from qiskit.transpiler.passes import RemoveIdentityEquivalent
from qiskit.transpiler import PassManager
from qiskit_ibm_runtime import QiskitRuntimeService
from qiskit_ibm_runtime import SamplerV2 as Sampler

from lucj.hardware_sqd_task.hardware_job.layout import get_zigzag_physical_layout
from qiskit.primitives import BitArray
import pickle


def constrcut_lucj_circuit(norb, nelec, operator):
    qubits = QuantumRegister(2 * norb)
    circuit = QuantumCircuit(qubits)
    circuit.append(ffsim.qiskit.PrepareHartreeFockJW(norb, nelec), qubits)
    circuit.append(ffsim.qiskit.UCJOpSpinBalancedJW(operator), qubits)
    circuit.measure_all()
    return circuit


def run_on_hardware(
    list_circuit: list[QuantumCircuit],
    norb,
    shots,
    list_sample_filenames,
    dynamic_decoupling=True,
):
    service = QiskitRuntimeService(name="wanhsuan-lucj")
    # service = QiskitRuntimeService(name="wanhsuan-lucj-internal")
    # backend = service.least_busy(
    #     operational=True, simulator=False, min_num_qubits=127
    # )
    # backend = service.backend("alt_pittsburgh")
    backend = service.backend("ibm_pittsburgh")
    # backend = service.backend("ibm_pittsburgh", use_fractional_gates=True)

    initial_layout, _ = get_zigzag_physical_layout(norb, backend=backend)
    # initial_layout: [1, 4, 0] program qubit 0 is mapped to physical qubit 1
    print(initial_layout)
    # with PRE_INIT passes
    # We will use the circuit generated by this pass manager for hardware execution
    list_isa_circuit = []
    for circuit in list_circuit:
        pass_manager = generate_preset_pass_manager(
            optimization_level=0,
            backend=backend,
            initial_layout=initial_layout,
            seed_transpiler=0,
        )
        ffsim_pass = ffsim.qiskit.PRE_INIT
        # ffsim_pass.append(RemoveIdentityEquivalent())
        # print(ffsim_pass)
        pass_manager.pre_init = ffsim_pass
        pass_manager.post_init = PassManager([RemoveIdentityEquivalent()])
        isa_circuit = pass_manager.run(circuit)
        print(f"Circuit: Gate counts (w/ pre-init passes): {isa_circuit.count_ops()}")
        op = isa_circuit.count_ops()
        num_1q_gates = op["rz"] + op["sx"] + op["x"]
        num_2q_gates = op["cz"]
        print(f"Circuit: gate depth: {isa_circuit.depth()}, qubit num: {isa_circuit.num_qubits}")
        print(f"Circuit: 1q gates: {num_1q_gates}, 2q gates: {num_2q_gates}")
        list_isa_circuit.append(isa_circuit)

    # print(list_sample_filenames)
    assert len(list_isa_circuit) == 3
    # assert 0
    sampler = Sampler(mode=backend)

    if dynamic_decoupling:
        print("Use dynamic decoupling")
        sampler.options.dynamical_decoupling.enable = True
        sampler.options.dynamical_decoupling.sequence_type = "XY4"

    job = sampler.run(list_isa_circuit, shots=shots)
    print(f"job id: {job.job_id()}")

    meas_circuit = []

    primitive_result = job.result()
    for pub_result, sample_filename in zip(primitive_result, list_sample_filenames):
        meas_circuit.append(pub_result.data.meas)
        with open(sample_filename, "wb") as f:
            pickle.dump(pub_result.data.meas, f)
        print(f"save file to {sample_filename}")
    return meas_circuit

# n2_6-31g_10e16o/batch.py vanilla
# Circuit: Gate counts (w/ pre-init passes): OrderedDict([('rz', 9506), ('sx', 3696), ('cz', 798), ('measure', 32), ('x', 10), ('barrier', 1)])
# Circuit: gate depth: 821
# Circuit: Gate counts (w/ pre-init passes): OrderedDict([('rz', 9506), ('sx', 3696), ('cz', 798), ('measure', 32), ('x', 10), ('barrier', 1)])
# Circuit: gate depth: 821
# Circuit: Gate counts (w/ pre-init passes): OrderedDict([('rz', 9506), ('sx', 3696), ('cz', 798), ('measure', 32), ('x', 10), ('barrier', 1)])
# Circuit: gate depth: 821

# pass_manager.optimization = PassManager([RemoveIdentityEquivalent()])
# Circuit: Gate counts (w/ pre-init passes): OrderedDict([('rz', 8806), ('sx', 3696), ('cz', 798), ('measure', 32), ('x', 10), ('barrier', 1)])
# Circuit: gate depth: 790
# Circuit: Gate counts (w/ pre-init passes): OrderedDict([('rz', 8761), ('sx', 3696), ('cz', 798), ('measure', 32), ('x', 10), ('barrier', 1)])
# Circuit: gate depth: 785
# Circuit: Gate counts (w/ pre-init passes): OrderedDict([('rz', 8806), ('sx', 3696), ('cz', 798), ('measure', 32), ('x', 10), ('barrier', 1)])
# Circuit: gate depth: 790

# pass_manager.post_init = PassManager([RemoveIdentityEquivalent()])
# Circuit: Gate counts (w/ pre-init passes): OrderedDict([('rz', 9506), ('sx', 3696), ('cz', 798), ('measure', 32), ('x', 10), ('barrier', 1)])
# Circuit: gate depth: 821
# Circuit: Gate counts (w/ pre-init passes): OrderedDict([('rz', 9133), ('sx', 3532), ('cz', 740), ('measure', 32), ('x', 10), ('barrier', 1)])
# Circuit: gate depth: 773
# Circuit: Gate counts (w/ pre-init passes): OrderedDict([('rz', 9506), ('sx', 3696), ('cz', 798), ('measure', 32), ('x', 10), ('barrier', 1)])
# Circuit: gate depth: 821

# fractional gates
# Circuit: Gate counts (w/ pre-init passes): OrderedDict([('rz', 3600), ('sx', 1460), ('rx', 1400), ('rzz', 734), ('x', 54), ('measure', 32), ('cz', 30), ('barrier', 1)])
# Circuit: gate depth: 370
# Circuit: Gate counts (w/ pre-init passes): OrderedDict([('rz', 3600), ('sx', 1460), ('rx', 1400), ('rzz', 734), ('measure', 32), ('cz', 30), ('x', 14), ('barrier', 1)])
# Circuit: gate depth: 366
# Circuit: Gate counts (w/ pre-init passes): OrderedDict([('rz', 3600), ('sx', 1460), ('rx', 1400), ('rzz', 734), ('x', 32), ('measure', 32), ('cz', 30), ('barrier', 1)])
# Circuit: gate depth: 367